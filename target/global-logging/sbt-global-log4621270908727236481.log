[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (OpenLogic-OpenJDK Java 1.8.0-262)
[debug]       Load.loadUnit: plugins took 84.5652ms
[debug]       Load.loadUnit: defsScala took 0.281ms
[debug] [Loading] Scanning directory C:\Users\Asus PC\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Asus PC\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 91.3477 ms
[debug]           Load.resolveProject(global-plugins) took 39.4372ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Asus PC\.sbt\1.0\plugins, plugins: List(<none>))) took 152.2743ms
[debug] [Loading] Done in C:\Users\Asus PC\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 171.7652ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2099ms
[debug]     Load.loadUnit(file:/C:/Users/Asus%20PC/.sbt/1.0/plugins/, ...) took 263.5923ms
[debug]   Load.apply: load took 396.9396ms
[debug]   Load.apply: resolveProjects took 5.4069ms
[debug]   Load.apply: finalTransforms took 45.3791ms
[debug]   Load.apply: config.delegates took 6.5188ms
[debug]   Load.apply: Def.make(settings)... took 584.5866ms
[debug]   Load.apply: structureIndex took 73.9282ms
[debug]   Load.apply: mkStreams took 1.3957ms
[info] loading global plugins from C:\Users\Asus PC\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2275.3512ms
[debug]           Load.loadUnit: plugins took 26.2872ms
[debug]           Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory D:\train\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\train\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6163 ms
[debug]               Load.resolveProject(train-build) took 1.2663ms
[debug]             Load.loadTransitive: finalizeProject(Project(id train-build, base: D:\train\project, plugins: List(<none>))) took 3.3481ms
[debug] [Loading] Done in D:\train\project, returning: (train-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5.2094ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.0146ms
[debug]         Load.loadUnit(file:/D:/train/project/, ...) took 32.366ms
[debug]       Load.apply: load took 33.4941ms
[debug]       Load.apply: resolveProjects took 0.0839ms
[debug]       Load.apply: finalTransforms took 7.0445ms
[debug]       Load.apply: config.delegates took 0.3711ms
[debug]       Load.apply: Def.make(settings)... took 59.0684ms
[debug]       Load.apply: structureIndex took 18.523ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from D:\train\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 866.0763ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory D:\train
[debug]       Load.loadUnit: mkEval took 6.3077ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\train, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1981 ms
[info] loading settings for project train from build.sbt ...
[debug]         Load.resolveProject(train) took 2.2073ms
[debug]       Load.loadTransitive: finalizeProject(Project(id train, base: D:\train, plugins: List(<none>))) took 3.8234ms
[debug] [Loading] Done in D:\train, returning: (train)
[debug]     Load.loadUnit: loadedProjectsRaw took 1997.5955ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.6682ms
[debug]   Load.loadUnit(file:/D:/train/, ...) took 2876.9374ms
[debug] Load.apply: load took 2878.0257ms
[debug] Load.apply: resolveProjects took 0.0915ms
[debug] Load.apply: finalTransforms took 4.6845ms
[debug] Load.apply: config.delegates took 0.3286ms
[debug] Load.apply: Def.make(settings)... took 50.0471ms
[debug] Load.apply: structureIndex took 17.654ms
[debug] Load.apply: mkStreams took 0.0041ms
[info] set current project to train (in build file:/D:/train/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-f77d436c94c62feac384
[info] started sbt server
